let thousandDigits = [
  7,
  3,
  1,
  6,
  7,
  1,
  7,
  6,
  5,
  3,
  1,
  3,
  3,
  0,
  6,
  2,
  4,
  9,
  1,
  9,
  2,
  2,
  5,
  1,
  1,
  9,
  6,
  7,
  4,
  4,
  2,
  6,
  5,
  7,
  4,
  7,
  4,
  2,
  3,
  5,
  5,
  3,
  4,
  9,
  1,
  9,
  4,
  9,
  3,
  4,
  9,
  6,
  9,
  8,
  3,
  5,
  2,
  0,
  3,
  1,
  2,
  7,
  7,
  4,
  5,
  0,
  6,
  3,
  2,
  6,
  2,
  3,
  9,
  5,
  7,
  8,
  3,
  1,
  8,
  0,
  1,
  6,
  9,
  8,
  4,
  8,
  0,
  1,
  8,
  6,
  9,
  4,
  7,
  8,
  8,
  5,
  1,
  8,
  4,
  3,
  8,
  5,
  8,
  6,
  1,
  5,
  6,
  0,
  7,
  8,
  9,
  1,
  1,
  2,
  9,
  4,
  9,
  4,
  9,
  5,
  4,
  5,
  9,
  5,
  0,
  1,
  7,
  3,
  7,
  9,
  5,
  8,
  3,
  3,
  1,
  9,
  5,
  2,
  8,
  5,
  3,
  2,
  0,
  8,
  8,
  0,
  5,
  5,
  1,
  1,
  1,
  2,
  5,
  4,
  0,
  6,
  9,
  8,
  7,
  4,
  7,
  1,
  5,
  8,
  5,
  2,
  3,
  8,
  6,
  3,
  0,
  5,
  0,
  7,
  1,
  5,
  6,
  9,
  3,
  2,
  9,
  0,
  9,
  6,
  3,
  2,
  9,
  5,
  2,
  2,
  7,
  4,
  4,
  3,
  0,
  4,
  3,
  5,
  5,
  7,
  6,
  6,
  8,
  9,
  6,
  6,
  4,
  8,
  9,
  5,
  0,
  4,
  4,
  5,
  2,
  4,
  4,
  5,
  2,
  3,
  1,
  6,
  1,
  7,
  3,
  1,
  8,
  5,
  6,
  4,
  0,
  3,
  0,
  9,
  8,
  7,
  1,
  1,
  1,
  2,
  1,
  7,
  2,
  2,
  3,
  8,
  3,
  1,
  1,
  3,
  6,
  2,
  2,
  2,
  9,
  8,
  9,
  3,
  4,
  2,
  3,
  3,
  8,
  0,
  3,
  0,
  8,
  1,
  3,
  5,
  3,
  3,
  6,
  2,
  7,
  6,
  6,
  1,
  4,
  2,
  8,
  2,
  8,
  0,
  6,
  4,
  4,
  4,
  4,
  8,
  6,
  6,
  4,
  5,
  2,
  3,
  8,
  7,
  4,
  9,
  3,
  0,
  3,
  5,
  8,
  9,
  0,
  7,
  2,
  9,
  6,
  2,
  9,
  0,
  4,
  9,
  1,
  5,
  6,
  0,
  4,
  4,
  0,
  7,
  7,
  2,
  3,
  9,
  0,
  7,
  1,
  3,
  8,
  1,
  0,
  5,
  1,
  5,
  8,
  5,
  9,
  3,
  0,
  7,
  9,
  6,
  0,
  8,
  6,
  6,
  7,
  0,
  1,
  7,
  2,
  4,
  2,
  7,
  1,
  2,
  1,
  8,
  8,
  3,
  9,
  9,
  8,
  7,
  9,
  7,
  9,
  0,
  8,
  7,
  9,
  2,
  2,
  7,
  4,
  9,
  2,
  1,
  9,
  0,
  1,
  6,
  9,
  9,
  7,
  2,
  0,
  8,
  8,
  8,
  0,
  9,
  3,
  7,
  7,
  6,
  6,
  5,
  7,
  2,
  7,
  3,
  3,
  3,
  0,
  0,
  1,
  0,
  5,
  3,
  3,
  6,
  7,
  8,
  8,
  1,
  2,
  2,
  0,
  2,
  3,
  5,
  4,
  2,
  1,
  8,
  0,
  9,
  7,
  5,
  1,
  2,
  5,
  4,
  5,
  4,
  0,
  5,
  9,
  4,
  7,
  5,
  2,
  2,
  4,
  3,
  5,
  2,
  5,
  8,
  4,
  9,
  0,
  7,
  7,
  1,
  1,
  6,
  7,
  0,
  5,
  5,
  6,
  0,
  1,
  3,
  6,
  0,
  4,
  8,
  3,
  9,
  5,
  8,
  6,
  4,
  4,
  6,
  7,
  0,
  6,
  3,
  2,
  4,
  4,
  1,
  5,
  7,
  2,
  2,
  1,
  5,
  5,
  3,
  9,
  7,
  5,
  3,
  6,
  9,
  7,
  8,
  1,
  7,
  9,
  7,
  7,
  8,
  4,
  6,
  1,
  7,
  4,
  0,
  6,
  4,
  9,
  5,
  5,
  1,
  4,
  9,
  2,
  9,
  0,
  8,
  6,
  2,
  5,
  6,
  9,
  3,
  2,
  1,
  9,
  7,
  8,
  4,
  6,
  8,
  6,
  2,
  2,
  4,
  8,
  2,
  8,
  3,
  9,
  7,
  2,
  2,
  4,
  1,
  3,
  7,
  5,
  6,
  5,
  7,
  0,
  5,
  6,
  0,
  5,
  7,
  4,
  9,
  0,
  2,
  6,
  1,
  4,
  0,
  7,
  9,
  7,
  2,
  9,
  6,
  8,
  6,
  5,
  2,
  4,
  1,
  4,
  5,
  3,
  5,
  1,
  0,
  0,
  4,
  7,
  4,
  8,
  2,
  1,
  6,
  6,
  3,
  7,
  0,
  4,
  8,
  4,
  4,
  0,
  3,
  1,
  9,
  9,
  8,
  9,
  0,
  0,
  0,
  8,
  8,
  9,
  5,
  2,
  4,
  3,
  4,
  5,
  0,
  6,
  5,
  8,
  5,
  4,
  1,
  2,
  2,
  7,
  5,
  8,
  8,
  6,
  6,
  6,
  8,
  8,
  1,
  1,
  6,
  4,
  2,
  7,
  1,
  7,
  1,
  4,
  7,
  9,
  9,
  2,
  4,
  4,
  4,
  2,
  9,
  2,
  8,
  2,
  3,
  0,
  8,
  6,
  3,
  4,
  6,
  5,
  6,
  7,
  4,
  8,
  1,
  3,
  9,
  1,
  9,
  1,
  2,
  3,
  1,
  6,
  2,
  8,
  2,
  4,
  5,
  8,
  6,
  1,
  7,
  8,
  6,
  6,
  4,
  5,
  8,
  3,
  5,
  9,
  1,
  2,
  4,
  5,
  6,
  6,
  5,
  2,
  9,
  4,
  7,
  6,
  5,
  4,
  5,
  6,
  8,
  2,
  8,
  4,
  8,
  9,
  1,
  2,
  8,
  8,
  3,
  1,
  4,
  2,
  6,
  0,
  7,
  6,
  9,
  0,
  0,
  4,
  2,
  2,
  4,
  2,
  1,
  9,
  0,
  2,
  2,
  6,
  7,
  1,
  0,
  5,
  5,
  6,
  2,
  6,
  3,
  2,
  1,
  1,
  1,
  1,
  1,
  0,
  9,
  3,
  7,
  0,
  5,
  4,
  4,
  2,
  1,
  7,
  5,
  0,
  6,
  9,
  4,
  1,
  6,
  5,
  8,
  9,
  6,
  0,
  4,
  0,
  8,
  0,
  7,
  1,
  9,
  8,
  4,
  0,
  3,
  8,
  5,
  0,
  9,
  6,
  2,
  4,
  5,
  5,
  4,
  4,
  4,
  3,
  6,
  2,
  9,
  8,
  1,
  2,
  3,
  0,
  9,
  8,
  7,
  8,
  7,
  9,
  9,
  2,
  7,
  2,
  4,
  4,
  2,
  8,
  4,
  9,
  0,
  9,
  1,
  8,
  8,
  8,
  4,
  5,
  8,
  0,
  1,
  5,
  6,
  1,
  6,
  6,
  0,
  9,
  7,
  9,
  1,
  9,
  1,
  3,
  3,
  8,
  7,
  5,
  4,
  9,
  9,
  2,
  0,
  0,
  5,
  2,
  4,
  0,
  6,
  3,
  6,
  8,
  9,
  9,
  1,
  2,
  5,
  6,
  0,
  7,
  1,
  7,
  6,
  0,
  6,
  0,
  5,
  8,
  8,
  6,
  1,
  1,
  6,
  4,
  6,
  7,
  1,
  0,
  9,
  4,
  0,
  5,
  0,
  7,
  7,
  5,
  4,
  1,
  0,
  0,
  2,
  2,
  5,
  6,
  9,
  8,
  3,
  1,
  5,
  5,
  2,
  0,
  0,
  0,
  5,
  5,
  9,
  3,
  5,
  7,
  2,
  9,
  7,
  2,
  5,
  7,
  1,
  6,
  3,
  6,
  2,
  6,
  9,
  5,
  6,
  1,
  8,
  8,
  2,
  6,
  7,
  0,
  4,
  2,
  8,
  2,
  5,
  2,
  4,
  8,
  3,
  6,
  0,
  0,
  8,
  2,
  3,
  2,
  5,
  7,
  5,
  3,
  0,
  4,
  2,
  0,
  7,
  5,
  2,
  9,
  6,
  3,
  4,
  5,
  0,
];

function largestProduct(n) {
  let currentProduct;
  let maxProduct = -Infinity;
  // 用 sliding window技巧, 設定左右的指標
  let left = 0;
  let right = n - 1;

  // 當right指標還沒跑到陣列尾時
  while (right < thousandDigits.length) {
    currentProduct = 1;
    // 計算此範圍內的乘積
    for (let i = left; i <= right; i++) {
      currentProduct = currentProduct * thousandDigits[i];
    }

    if (currentProduct === 23514624000) {
      console.log(`left:${left}, right${right}`);
    }

    // 比較一下目前的乘積和上次紀錄的誰大
    if (currentProduct > maxProduct) {
      maxProduct = currentProduct;
    }

    // 將左右指標往陣列右方移動
    right++;
    left++;
  }

  return maxProduct;
}

console.log('largestProduct(4)', largestProduct(4)); //5832
console.log('largestProduct(13)', largestProduct(13)); //23514624000

/** My Solution */
function largestProduct_my(n) {
  let largestProduct = -Infinity; // 用來記錄最大的乘積
  let newDigitNumberArray = []; // 用來記錄被分割的小陣列
  let tempArray = [];
  // 陣列內的 0 當作分隔點,切分小陣列
  for (let num of thousandDigits) {
    if (num === 0) {
      if (tempArray.length !== 0) {
        newDigitNumberArray.push(tempArray);
      }
      tempArray = [];
    } else {
      tempArray.push(num);
    }
  }

  // 過濾掉長度比 n 小的小陣列
  const filteredArr = newDigitNumberArray.filter( arr => arr.length >= n);
  // 不存在比 n 大的小陣列
  if (filteredArr.length === 0) {
    return null;
  }

  //console.log('filteredArr', filteredArr);

  // loop 所有的小陣列找出最大乘積
  for (let arr of filteredArr) {
    let currentProduct = 1; // 紀錄目前陣列的最大乘積

    // 先跑第一次 0 ~ n 的乘積並且記錄起來(這是sliding window的範圍)
    for (let i = 0; i < n; i++) {
      currentProduct = currentProduct * arr[i];
    }
    if (currentProduct > largestProduct) {
      largestProduct = currentProduct;
    }

    // 接下來的範圍是從 1 ~ 陣列長度扣掉 n + 1(靠杯, 這個 +1 不能漏掉了,會少找一次) 
    for (let i = 1; i < arr.length - n + 1; i++) {
      const start = arr[i - 1]; // 上次乘積的頭
      const end = arr[i + n - 1]; // 本次乘積的尾

      // 本次的乘積 = (上次的乘積 / 上次的頭) * 本次的尾 (若為0就沒用了)
      currentProduct = (currentProduct / start) * end;
      //console.log('current product', largestProduct, currentProduct)
      if (currentProduct > largestProduct) {
        largestProduct = currentProduct;
      }
    }
  }

  return largestProduct;
}

console.log('largestProduct_my(4)', largestProduct_my(4)); // 5832
console.log('largestProduct_my(13)', largestProduct_my(13)); // 23514624000